
#include <iostream>
#include<stdio.h>
#include<stdlib.h>
#include<fstream>
#include<math.h>
#include<algorithm>
#include<vector>
#include<string.h>
unsigned char square[480][480];
unsigned char square_shrink[480][480];
unsigned char temp_mat[480][480];
int square_norm[480][480];
int square_norm1[480][480];
unsigned char square_find[480][480];
unsigned char square_inter[480][480];
unsigned char pepper_extend[516][516][3];
unsigned char pepper_denoised[512][512][3];
unsigned char pepper_denoised_median[512][512][3];
unsigned char pepper_denoised_gauss[512][512][3];
unsigned char pepper_free[512][512][3];
unsigned char mean[3][3]={1};
//unsigned median[3][3];
using namespace std;

int main()
{
    FILE *file1, *file2, *file3,*file4,*file5,*file6,*file;
    int BytesPerPixel=3;
    int i,j;
    if (!(file1=fopen("board_hole_filled.raw","rb"))) {
		cout << "Cannot open file: " << "board_hole_filled.raw" <<endl;
		exit(1);
	}
	fread(square,sizeof(unsigned char), 480*480, file1);
    fclose(file1);
    //normalise the pixel intensities
    int temp_count=0;
    for(int i=0;i<480;i++)
    {
        for(int j=0;j<480;j++)
        {
            square_norm[i][j]=(int)square[i][j]/255;
        }
    }

for(int i=0;i<480;i++)
{
    for(int j= 0;j<480;j++)
    {
        temp_mat[i][j]=(int)square_norm[i][j];

    }
}

  string string_table[46]={"010011000","010110000","000110010","000011010","001011001","111010000","100110100","000010111","110011000","010011001","011110000",
  "001011010","011011000","110110000","000110110","000011011","110011001","011110100","111011000","011011001","111110000",
  "110110100","100110110","000110111","000011111","001011011","111011001","111110100","100110111","001011111","011011011",
  "111111000","110110110","000111111","111011011","011011111","111111100","111111001","111110110","110110111","100111111",
  "001111111","111011111","111111101","111110111","101111111"};
  string uncon[327]={
  "001010000","100010000","000010010","000011000","001011000","011010000","110010000","100110000",
  "000110100","000010110","000010011","000011001","011110000","110011000","010011001","001011010",
  "001011100","011010100","011011100","110010001",
  "100110001","110110001","001010110","001110100","001110110","100011001","100010011","100011011",
  "110110000","110110001","110111000","110111001","111110000","111110001","111111000","111111001",
  "110110010","110110011","110111010","110111011","111110010","111110011","111111010","111111011",
  "110110100","110110101","110111100","110111101","111110100","111110101",
  "111111100","111111101","110110110","110110111","110111110","110111111",
  "111110110","111110111","111111110","111111111",
  "010110010","011110010","110110010","111110010","010110010","010110011","010110110","010110111",
  "010011010","010011011","010011110","010011111",
  "010011010","011011010","110011010","111011010","010111000","010111100","110111000","110111100",
  "010111000","010111100","110111000","110111100",
  "000111010","000111110","100111010","100111110","100010101","100010111","110010101","110010111",
  "100110101","100110111","110110101","110110111",
  "100011100","100011110","110011100","110011110","100111100","100111110","110111100","110111110",
  "100011101","100011111","110011101","110011111","100111101","100111111","110111101","110111111",
  "101010100","101010110","111010100","111010110","101110100","101110110","111110100","111110110",
  "101010101","101010111","111010101","111010111","101110101","101110111","111110101","111110111",
  "101011100","101011110","111011100","111011110","101111100","101111110","111111100","111111110",
  "101011101","101011111","111011101","111011111","101111101","101111111","111111101","111111111",
  "101010100","101011100","111010100","111011100","101110100","101111100","111110100","111111100",
  "101010010","101011010","111010010","111011010","101110010","101111010","111110010","111111010",
  "101010110","101011110","111010110","111011110","101110110","101111110","111110110","111111110",
  "101010001","101011001","111010001","111011001","101110001","101111001","111110001","111111001",
  "101010101","101011101","111010101","111011101","101110101","101111101","111110101","111111101",
  "101010011","101011011","111010011","111011011","101110011","101111011","111110011","111111011",
  "101010111","101011111","111010111","111011111","101110111","101111111","111110111","111111111",
  "101010001","101011001","101010011","101011011","111010001","111011001","111010011","001110001",
  "001111001","001110011","001111011","011110001","011111001","011110011","011111011",
  "101110001","101111001","101110011","101111011","111110001","111111001","111110011","111111011",
  "001010101","001011101","001010111","001011111","011010101","011011101","011010111","011011111",
  "101010101","101011101","101010111","101011111","111010101","111011101","111010111","111011111",
  "001110101","001111101","001110111","001111111","011110101","011111101","011110111","011111111",
  "101110101","101111101","101110111","101111111","111110101","111111101","111110111","111111111",
  "001010101","001011101","001010111","001011111","001110101","001111101","001110111","001111111",
  "010010101","010011101","010010111","010011111","010110101","010111101","010110111","010111111",
  "011010101","011011101","011010111","011011111","011110101","011111101","011110111","011111111",
  "100010101","100011101","100010111","100011111","100110101","100111101","100110111","100111111",
  "101010101","101011101","101010111","101011111","101110101","101111101","101110111","101111111",
  "110010101","110011101","110010111","110011111","110110101","110111101","110110111","110111111",
  "111010101","111011101","111010111","111011111","111110101","111111101","111110111","111111111",
  "001110010","001110011","101110010","101110011","010110001","011110001","010110101","011110101",
  "010011100","010011101","110011100","110011101","100011010","101011010","100011110","101011110"};
  /*"110110000","111111111",
  "010111000","110111100","010111000","011111001","000111010","001111011","000111010","100111110","010110010","111110010","010110010","010110111",
  "010011010","0100011111","010011010","111011010","101010001","101010010","101010011","101010100","1010100101",
  "1010100110","101010111","101010100","100011100","101011100","100010101","101010101","100011101","101011101","100010101","010010101",
  "011010101","001010101","101010101","111010101","001010101","001110001","001110101","101010001","101010101","101110001","101110101",
  "010011100","110011101","010110001","011110101","001110010","101110011","100011010","101011110"*/
//Perform thinning on the complemented board hole filled image------//
string str1="";
string str2="";
int count1=0;
int c1=0;
for(int run=0;run<200;run++) //run it 200 times
{
for(int i=0;i<477;i++)
{
for(int j=0;j<477;j++)
{
        for(int m=0;m<3;m++)
        {
            for(int n=0;n<3;n++)
            {
                str1=str1+(char)(temp_mat[m+i][n+j]+48);
            }
        }
        int mid_val=(int)temp_mat[i+1][j+1];
        if(mid_val!=1)
        {
            square_inter[i+1][j+1]=0;
        }
        else
        {
        for(int v=0;v<46;v++) //run through the entire shrinking conditional masks (all 59)
        {
            if(str1==string_table[v]) //if the string of original image is equal to any of the 59, count increment, its a hit
            {
                count1++;
            }
        }
            if(count1!=0) //if it's a hit
            {
                square_inter[i+1][j+1]=1;
            }
             else
            {
            square_inter[i+1][j+1]=0;
            }

        }
        count1=0;
        str1="";
}
}

for(int i=0;i<477;i++)
{
for(int j=0;j<477;j++)
{
        for(int m=0;m<3;m++)
        {
            for(int n=0;n<3;n++)
            {

                    str2=str2+(char)(square_inter[m+i][n+j]+48);
                //cout<<str1<<endl;
            }
            //cout<<endl;
        }
            int new_mid_val=(int)square_inter[i+1][j+1];

            if(new_mid_val==1)
                    {
            //square_shrink[i][j]=255; //shrink that pixel to white
                    for(int val=0;val<327;val++)
                    {
                    if(str2==uncon[val])
                        {
                            c1=c1+1;
                        }
                    }

                    if(c1!=0)
                    {
                        square_shrink[i+1][j+1]=temp_mat[i+1][j+1];

                    }
                    else
                    {
                        square_shrink[i+1][j+1]=0;

                    }

        }
        else
            {
            square_shrink[i+1][j+1]=temp_mat[i+1][j+1];
            }
             c1=0;
        str2="";
        }
}

for(int temp1=0;temp1<480;temp1++)
{
    for(int temp2=0;temp2<480;temp2++)
    {
        temp_mat[temp1][temp2]=square_shrink[temp1][temp2];
        square_inter[temp1][temp2]=0;
    }
}
}
//-------re-Normalising the output thinned image------//
for(int i=0;i<480;i++)
{
    for(int j=0;j<480;j++)
    {
        square_shrink[i][j]=255*square_shrink[i][j];
    }
}
int final1=0;
int h=0;
for(int i=0;i<480;i++)
{
    for(int j=0;j<480;j++)
    {
        if(temp_mat[i][j]==1)
        {
            final1++;
        }
        if(square[i][j]==255)
        {
            h++;
        }
    }
}
cout<<final1<<endl;
cout<<h<<endl;


if (!(file=fopen("board_15_objects_thin.raw","wb"))) {
		cout << "Cannot open file: " << "board_15_objects_thin.raw" << endl;
		exit(1);
	}

	fwrite(square_shrink, sizeof(unsigned char),   480*480, file);
	printf("File written\n");
	fclose(file);
	//-------Normalising the output thinned image------//
for(int i=0;i<480;i++)
{
    for(int j=0;j<480;j++)
    {
        square_norm1[i][j]=square_shrink[i][j]/255;
    }
}
//-------------Count the number of squares in the image----------//
string str5="";
int count_square=0;
for(int i=0;i<475;i++)
{
    for(int j=0;j<475;j++)
    {

    for(int m=0;m<5;m++)
    {

        for(int n=0;n<5;n++)
        {
          str5=str5+(char)(square_norm1[m+i][n+j]+48);
        }
    }
    if(str5=="0000000000001000000000000"||str5=="0000000000001100000000000")
    {
        count_square++;
    }
    str5="";
    }
}
cout<<"Total number of squares in the image with or without holes is: "<<count_square<<endl;
cout<<"Total number of circles in the image with or without holes is: "<<(15-count_square)<<endl;
        return 0;

}


